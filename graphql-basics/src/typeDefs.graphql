type Query {
  me: User!
  posts(searchByAuthor: String, searchByTitle: String): [Post]
  comments(searchByAuthor: String, searchByBody: String): [Comment]
  users(searchByID: String, searchByUsername: String): [User]
}

type Mutation {
  createUser(data: createUserInput): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: updateUserInput): User!

  createPost(data: createPostInput): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: updatePostInput): Post!

  createComment(data: createCommentsInput): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: updateCommentInput): Comment!
}

type Subscription {
  comment(postID: ID!): CommentSubscriptionPayload!
  userPost(userID: ID!): PostSubscriptionPayload!
  post: PostSubscriptionPayload!
}

###########################

input createUserInput {
  username: String!,
  email: String!
}

input updateUserInput {
  username: String,
  email: String
}

###########################

input createPostInput {
  title: String!,
  body: String!,
  published: Boolean!,
  author: ID!
}

input updatePostInput {
  title: String,
  body: String,
  published: Boolean
}

###########################

input createCommentsInput {
  body: String!,
  published: Boolean!,
  author: ID!,
  post: ID!
}

input updateCommentInput {
  body: String,
  published: Boolean
}

###########################

type Post {
  title: String!
  body: String!
  published: Boolean!
  id: ID!
  author: User!
  comments: [Comment!]
}

type Comment {
  body: String!
  published: Boolean!
  id: ID!
  author: User!
  post: Post!
}

type User {
  username: String!
  id: ID!
  email: String!
  posts: [Post!]
  comments: [Comment!]
}

###########################

type PostSubscriptionPayload {
  mutation: String!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: String!
  data: Comment!
}

###########################
